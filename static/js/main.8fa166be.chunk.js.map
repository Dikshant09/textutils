{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","backgroundColor","value","onChange","event","console","log","target","rows","anaylzeText","toUpperCase","showAlert","toLowerCase","a","analyzeText","split","i","length","substring","document","getElementById","select","navigator","clipboard","writeText","newText","join","replaceAll","defaultProps","aboutText","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8fa166be.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport default function Navbar(props) {\n    return (\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n            <div className=\"container-fluid\">\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                        <li className=\"nav-item\">\n                            {/* <a className=\"nav-a active\" aria-current=\"page\" href=\"/\">Home</a> */}\n                        </li>\n                        <li className=\"nav-item\">\n                            {/* <a className=\"nav-a\" href=\"/about\">{props.aboutText}</a> */}\n                        </li>\n                    </ul>\n                    {/* <form className=\"d-flex\">\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n                        <button cla\n                        ssName=\"btn btn-primary\" type=\"submit\">Search</button>\n                    </form> */}\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\n                    </div>\n                </div>\n            </div>\n        </nav>\n    )\n}\n\nNavbar.propTypes = {\n    title: PropTypes.string.isRequired,\n    aboutText: PropTypes.string.isRequired\n}\n\nNavbar.defaultProps = {\n    title: 'Set title here',\n    aboutText: 'About'\n  };","import React, {useState} from 'react'\n\nexport default function TextForm(props) {\n    const [text, setText] = useState('');\n    // text = \"new text\"; wrong way to update text\n    // setText(\"new text\"); right way to update text\n    const handleUpClick = () => {\n        console.log(\"Convert to uppercase is pressed + text\");\n        let anaylzeText = text.toUpperCase();\n        setText(anaylzeText);\n        props.showAlert(\"Converted to uppercase\", 'success')\n    }\n    const handleLoClick = () => {\n        console.log(\"Convert to lowercase is pressed + text\");\n        let anaylzeText = text.toLowerCase();\n        setText(anaylzeText);\n        props.showAlert(\"Converted to lowercase\", 'success')\n    }\n    const handleOnchange = (event) => {\n        console.log(\"handle Onchange is pressed\");\n        setText(event.target.value);\n    }\n    const handleReClick = (event) => {\n        console.log(\"handle reset is pressed\");\n        props.showAlert(\"Text Cleared\", 'success')\n        setText(\"\");\n    }\n    const handleCamelCaseClick = (event) =>{\n        console.log('handle camel case click is pressed');\n        let a = text;\n        let analyzeText = \"\";\n        a = a.split(' ');\n        for(let i = 0; i<a.length; i++){\n            analyzeText += a[i][0].toUpperCase() + a[i].substring(1) + ' ';\n        }\n        setText(analyzeText[0].toLowerCase()+analyzeText.substring(1));\n        props.showAlert(\"Converted to Camel Case\", 'success')\n    }\n    const handlePascalCaseClick = (event) =>{\n        console.log('handle camel case click is pressed');\n        let a = text;\n        let analyzeText = \"\";\n        a = a.split(' ');\n        for(let i = 0; i<a.length; i++){\n            analyzeText += a[i][0].toUpperCase() + a[i].substring(1) + ' ';\n        }\n        setText(analyzeText);\n        props.showAlert(\"Converted to Pascal Case\", 'success')\n    }\n    const handleCopy = (event) => {\n        console.log(\"handle copy is pressed\");\n        var text = document.getElementById('myBox');\n        text.select();\n        navigator.clipboard.writeText(text.value); \n        props.showAlert(\"Text Copied\", 'success')\n    }\n    const handleExtraSpaces = () => {\n        console.log(\"handle extra spaces is pressed\");\n        let newText = text.split(/[ ]+/);\n        setText(newText.join(\" \"));\n    }\n    const handleCurlyToSquare = () => {\n        let newText = text.replaceAll('[', '{');\n        newText = newText.replaceAll(']', '}');\n        setText(newText);\n        console.log(\"Curly bracked to square bracket\");\n    }\n    return (\n        <>\n        <div className = 'container' style = {{color: props.mode === 'dark' ? 'white' : 'black'}}>\n            <h1>{props.heading}</h1>\n            <div className=\"mb-3\">\n                <textarea className=\"form-control\" style = {{backgroundColor: props.mode === 'dark' ? 'grey' : 'white', color : props.mode === 'dark' ? 'white' : 'black'}} value ={text} onChange={ handleOnchange } id=\"myBox\" rows=\"8\"></textarea>\n            </div>\n            <button className=\"btn btn-primary mx-1 my-1\" onClick={ handleUpClick }>Convert to UpperCase</button>\n            <button className=\"btn btn-primary mx-1 my-1\" onClick={ handleLoClick }>Convert to lowerCase</button>\n            <button className=\"btn btn-primary mx-1 my-1\" onClick={ handleCamelCaseClick }>Convert to camelCase</button>\n            <button className=\"btn btn-primary mx-1 my-1\" onClick={ handlePascalCaseClick }>Convert to PascalCase</button>\n            <button className=\"btn btn-primary mx-1 my-1\" onClick={ handleReClick }>Reset</button>\n            <button className=\"btn btn-primary mx-1 my-1\" onClick={ handleCopy }>Copy text</button>\n            <button className=\"btn btn-primary mx-1 my-1\" onClick={ handleExtraSpaces }>Remove Extra Spaces</button>\n            <button className=\"btn btn-primary mx-1 my-1\" onClick={ handleCurlyToSquare }>Curly to Square Brackets</button>\n        </div>\n        <div className=\"container my-3\"  style = {{color: props.mode === 'dark' ? 'white' : 'black'}}> \n            <h2>Your Text Summary</h2>\n            <p><b>{text.length > 0 ? text.split(\" \").length-1 : 0}</b> Words and <b>{text.length > 0 ?text.length : 0} Characters</b></p>\n            <p><b>{ text.length > 0 ? text.split(\" \").length*0.008 : 0}</b> Minutes Read</p>\n            <h2>Preview</h2>\n            <p>{text.length > 0 ? text : 'Enter your text here to preview it here'}</p>\n        </div>\n        </>\n    )\n}\n","import React from 'react'\n\nfunction Alert(props) {\n    const capitalize = (word)=>{\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n    return (\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n           <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg} \n        </div>\n    )\n}\n\nexport default Alert\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n \nfunction App() {\n  const [mode, setMode] = useState('light'); // Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n      setAlert({\n        msg: message,\n        type: type\n      })\n      setTimeout(() => {\n          setAlert(null);\n      }, 1500);\n  }\n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Dark Mode';\n      // setInterval(() => {\n      //   document.title = 'TextUtils is Amazing Mode';\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = 'Install TextUtils Now';\n      // }, 1500);\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Light Mode';\n    }\n  }\n  return (\n    <>\n    {/* <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\" /> */}\n    {/* <Navbar/> */}\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n        <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode}/>\n    </div>\n    </> \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}